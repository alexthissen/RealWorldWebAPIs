// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace GameServerWebAPI.ClientSdk.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class GameServerInfo
    {
        /// <summary>
        /// Initializes a new instance of the GameServerInfo class.
        /// </summary>
        public GameServerInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GameServerInfo class.
        /// </summary>
        public GameServerInfo(int gameport, int appid, int region, int players, int maxPlayers, int bots, bool secure, bool dedicated, string addr = default(string), string name = default(string), string gamedir = default(string), string steamid = default(string), string version = default(string), string product = default(string), string map = default(string), string os = default(string), string gametype = default(string))
        {
            Addr = addr;
            Gameport = gameport;
            Name = name;
            Appid = appid;
            Gamedir = gamedir;
            Steamid = steamid;
            Version = version;
            Product = product;
            Region = region;
            Players = players;
            MaxPlayers = maxPlayers;
            Bots = bots;
            Map = map;
            Secure = secure;
            Dedicated = dedicated;
            Os = os;
            Gametype = gametype;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "addr")]
        public string Addr { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gameport")]
        public int Gameport { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appid")]
        public int Appid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gamedir")]
        public string Gamedir { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "steamid")]
        public string Steamid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "product")]
        public string Product { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "region")]
        public int Region { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "players")]
        public int Players { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_players")]
        public int MaxPlayers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bots")]
        public int Bots { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "map")]
        public string Map { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secure")]
        public bool Secure { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dedicated")]
        public bool Dedicated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "os")]
        public string Os { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gametype")]
        public string Gametype { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
